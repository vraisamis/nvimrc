# 起動時に読み込む
# プラグイン管理
[[plugins]]
repo = 'Shougo/dein.vim'

# doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'

# fazzy matcher
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
" Ag コマンドがあるが、typoが多いのでalias
command! -nargs=* -bang AG <bang>Ag <args>
'''

# gitコマンド
[[plugins]]
repo = 'lambdalisue/gina.vim'
# if = 0

# linter
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
" let g:ale_statusline_format = ['x %d', '! %d', '* ok']
" ファイル保存時に実行
let g:ale_fix_on_save = 1
let g:ale_set_loclist = 1
let g:ale_linters = {'java': []}
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_javascript_prettier_options = '--print-width 140 --single-quote --jsx-bracket-same-line'
" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
let s:ale_running = 0
augroup ALEProgress
  autocmd!
  autocmd User ALELintPre  let s:ale_running = 1 | redrawstatus
  autocmd User ALELintPost let s:ale_running = 0 | redrawstatus
augroup end
'''

# statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2
let g:lightline = {
	\ 'colorscheme' : 'iceberg',
	\ 'mode_map': { 'c': 'NORMAL' },
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ], [ 'gina', 'filename', 'ale' ] ]
	\ },
	\ 'component': {
	\   'gina': '%{g:gina_status_str}'
	\ },
	\ 'component_function': {
	\   'filename': 'LightlineFilename',
	\   'ale': 'MyALEStatus'
	\ },
	" \ 'separator': { 'left': '⮀', 'right': '⮂' },
	" \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
	\ }

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '[RO]' : ''
endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
				\  &ft == 'unite' ? unite#get_status_string() :
				\  &ft == 'vimshell' ? vimshell#get_status_string() :
				\  &ft =~ '^gina' ? &ft :
				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
				\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

augroup gina-status-lazy
  autocmd!
  autocmd CursorMoved,CursorMovedI * call s:f_gina_status('CursorMoved')
  autocmd CursorHold,CursorHoldI * call s:f_gina_status('CursorHold')
  autocmd WinEnter * call s:f_gina_status('WinEnter')
  autocmd WinLeave * call s:f_gina_status('WinLeave')

  let s:gina_status = 0
  let g:gina_status_str = gina#component#repo#preset()
  function! s:f_gina_status(event)
    if a:event ==# 'WinEnter'
      let g:gina_status_str = gina#component#repo#preset()
      let s:gina_status = 2
    elseif a:event ==# 'WinLeave'
      " Do nothing
    elseif a:event ==# 'CursorMoved'
      if s:gina_status
        if 1 < s:gina_status
          let s:gina_status = 1
        else
          " Do nothing
          let s:gina_status = 0
        endif
      endif
    elseif a:event ==# 'CursorHold'
      let g:gina_status_str = gina#component#repo#preset()
      let s:gina_status = 1
    endif
  endfunction
augroup END

function! MyALEStatus()
  return s:ale_running != '' ? '[linting]' : ALEGetStatusLine()
  endif
endfunction
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
command! NEF NERDTreeFind
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
# if = 0
hook_add = '''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=1
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
let g:indent_guides_guide_size=1
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
" let g:tcommentMaps = 0
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
if has('win32')
elseif has('mac')
else
    let g:previm_open_cmd = 'google-chrome'
endif
"let g:previm_custom_css_path = expand('~') . '/.config/nvim/css/bootstrap-md.css'
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_no_default_key_mappings = 1
" let g:quickrun_config = {
"             \    "java": {
"             \        "exec": "java %S:r:gs?[/\\]?.?"
"             \    }
"             \}
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''
