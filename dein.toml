#########################################################
# Misc
#########################################################
# 起動時に読み込む
# プラグイン管理
[[plugins]]
repo = 'Shougo/dein.vim'

# doc
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'xolox/vim-misc'

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'

# api blueprint file type
[[plugins]]
repo = 'kylef/apiblueprint.vim'


#########################################################
# Fuzzy Matcher
#########################################################
[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = 0
on_source = ['fzf.vim']
trusted = 1

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
on_func = 'fzf#'
trusted = 1
hook_add = '''
" Ag コマンドがあるが、typoが多いのでalias
command! -nargs=* -bang AG Ag<bang> <args>
command! -nargs=* -bang RG Rg<bang> <args>

function! s:getAbsoluteCursorPos() abort
  let pos = getpos(".")
  let origin = win_screenpos(".")
  let abs_cursor_line = (origin[0] - 1) + pos[1] - line('w0')
  let abs_cursor_col = (origin[1] - 1) + wincol() - col('w0')
  return [abs_cursor_line, abs_cursor_col]
endfunction

" use floating window
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, '&signcolumn', 'no')

  let abs_pos = s:getAbsoluteCursorPos()
  let width = float2nr(&columns - (&columns * 2 / 10))
  let tmp_col = float2nr((&columns - width) / 2)
  let col = max([min([tmp_col, abs_pos[1]]), abs_pos[1] - width])

  let toplines = abs_pos[0]
  let bottomlines = &lines - 1 - abs_pos[0]

  let row = 1
  " 下が広い
  if bottomlines > toplines
    let $FZF_DEFAULT_OPTS='--layout=reverse'
    " -2: statusline
    let height = bottomlines - 2
    let row = abs_pos[0] + 1
    let opts = {
          \ 'relative': 'editor',
          \ 'row': row,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height
          \ }
  else
    let $FZF_DEFAULT_OPTS=''
    " -1: tabline
    let height = toplines - 1
    let row = 1
    let opts = {
          \ 'relative': 'editor',
          \ 'row': row,
          \ 'col': col,
          \ 'width': width,
          \ 'height': height
          \ }
  endif

  call nvim_open_win(buf, v:true, opts)
endfunction

if has("nvim-0.4.0")
  " g:fzf_layout だとbangのときにfloating windowにできない……
  " コマンドrenameが必要になりそう
  let g:fzf_layout = { 'window': 'call FloatingFZF()' }
endif


""" menu
let s:menu = {}

let s:menu['LanguageClient TextDocument CodeAction'] = {
      \ 'type': 'funccall',
      \ 'body': 'LanguageClient#textDocument_codeAction'
      \ }

let s:menu['Rg test'] = {
      \ 'type': 'command',
      \ 'body': 'Rg test'
      \ }

" echo s:menu
" echo items(s:menu)

" echo map(items(s:menu), {key, val -> key})

let s:menu_list = map(sort(keys(s:menu)), {key, val -> key . "\t" . val})
echo s:menu_list

function! s:test(selected)
  " echo できていない
  " echo a:selected . " is selected"
  let g:my_my_selected = a:selected
  echo g:my_my_selected
endfunction

function! s:my_menu()
  call fzf#run(fzf#wrap('menu_test', {
        \ 'source': s:menu_list,
        \ 'sink': funcref('s:test')
        \ }))
endfunction

command! Test call s:my_menu()
'''


#########################################################
# Visual
#########################################################
# statusline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set laststatus=2
let g:lightline = {
	\ 'colorscheme' : 'iceberg',
	\ 'mode_map': { 'c': 'NORMAL' },
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ], [ 'gina', 'session', 'filename' ] , [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]]
	\ },
	\ 'component': {
	\   'gina': '%{g:gina_status_str}'
	\ },
	\ 'component_function': {
	\   'filename': 'LightlineFilename',
	\   'session': 'MySessionName',
	\ },
  \ 'component_expand' : {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ },
  \ 'component_type' : {
  \     'linter_checking': 'left',
  \     'linter_warnings': 'warning',
  \     'linter_errors': 'error',
  \     'linter_ok': 'left',
  \ },
	\ }

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '[RO]' : ''
endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
				\  &ft == 'unite' ? unite#get_status_string() :
				\  &ft == 'vimshell' ? vimshell#get_status_string() :
				\  &ft =~ '^gina' ? &ft :
				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
				\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! MySessionName() abort
  let session_name = xolox#session#find_current_session()
  return session_name == '' ? '' : '[S]' . session_name
endfunction

augroup gina-status-lazy
  autocmd!
  autocmd CursorMoved,CursorMovedI * call s:f_gina_status('CursorMoved')
  autocmd CursorHold,CursorHoldI * call s:f_gina_status('CursorHold')
  autocmd WinEnter * call s:f_gina_status('WinEnter')
  autocmd WinLeave * call s:f_gina_status('WinLeave')

  let s:gina_status = 0
  let g:gina_status_str = gina#component#repo#preset()
  function! s:f_gina_status(event)
    if a:event ==# 'WinEnter'
      let g:gina_status_str = gina#component#repo#preset()
      let s:gina_status = 2
    elseif a:event ==# 'WinLeave'
      " Do nothing
    elseif a:event ==# 'CursorMoved'
      if s:gina_status
        if 1 < s:gina_status
          let s:gina_status = 1
        else
          " Do nothing
          let s:gina_status = 0
        endif
      endif
    elseif a:event ==# 'CursorHold'
      let g:gina_status_str = gina#component#repo#preset()
      let s:gina_status = 1
    endif
  endfunction
augroup END
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale', 'lightline']

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
command! NEF NERDTreeFind
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "M",
    \ "Staged"    : "+",
    \ "Untracked" : "?",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "m",
    \ "Deleted"   : "D",
    \ "Dirty"     : "?",
    \ "Clean"     : "o",
    \ 'Ignored'   : 'X',
    \ "Unknown"   : "?"
    \ }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=1
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236
" let g:indent_guides_guide_size=1
'''



#########################################################
# Action, Command
#########################################################
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
let g:over_enable_auto_nohlsearch = 0
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
" let g:tcommentMaps = 0
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_no_default_key_mappings = 1
" let g:quickrun_config = {
"             \    "java": {
"             \        "exec": "java %S:r:gs?[/\\]?.?"
"             \    }
"             \}
'''

[[plugins]]
repo = 'reconquest/vim-pythonx'

[[plugins]]
repo = 'sirver/ultisnips'
depends = ['vim-pythonx']
hook_add = '''
let g:UltiSnipsSnippetDirectories = ['UltiSnips', 'local_snippets']
let g:UltiSnipsSnippetsDir = expand("~/.config/nvim/UltiSnips")
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1
'''

[[plugins]]
repo = 'xolox/vim-session'
depends = [ 'vim-misc' ]
hook_add = '''
" gitリポジトリ配下ならgitのrootを返す。そうでないなら空を返す
function! s:GetGitDir()
  " Set 'gitdir' to be the folder containing .git
  let gitdir = system("git rev-parse --show-toplevel")
  " See if the command output starts with 'fatal' (if it does, not in a git repo)
  let isnotgitdir=matchstr(gitdir, '^fatal:.*')
  " If it empty, there was no error. Let's cd
  if empty(isnotgitdir)
    return substitute(gitdir, '\n', '', 'g')
  else
    return ""
  endif
endfunction

function! s:GetGitCurrentBranch()
  " Set 'gitdir' to be the folder containing .git
  let branch = system("git rev-parse --abbrev-ref HEAD")
  " See if the command output starts with 'fatal' (if it does, not in a git repo)
  let isnotgitdir=matchstr(branch, '^fatal:.*')
  " If it empty, there was no error. Let's cd
  if empty(isnotgitdir)
    return substitute(branch, '\n', '', 'g')
  else
    return ""
  endif
endfunction

"""" 以下の順番でsessionディレクトリを探索
"""" 1. 現在のディレクトリ直下の .vimsessions フォルダ
"""" 2. gitリポジトリ配下ならリポジトリroot直下の .vimsessionsフォルダ
"""" 3.  ~/.config/nvim/default-sessions　（共通）

" https://www.g104robo.com/entry/vim-session
" 現在のディレクトリ直下の .vimsessions/ を取得
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
if isdirectory(s:local_session_directory)
  " 存在すれば
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開かない
  let g:session_autoload = 'no'
  " 1分間に1回自動保存
  let g:session_autosave_periodic = 1
  let g:session_autosave_silent = 1
else
  " 存在しなければ
  " 現在のリポジトリroot配下の .vimsessions/ を取得
  let s:git_dir = s:GetGitDir()
  if strlen(s:git_dir) > 0
    " gitリポジトリ配下なら
    let s:local_session_directory = xolox#misc#path#merge(s:git_dir, '.vimsessions')
    " 存在しなければディレクトリ作成する
    if !isdirectory(s:local_session_directory)
      call mkdir(s:local_session_directory)
    endif
    " session保存ディレクトリをそのディレクトリの設定
    let g:session_directory = s:local_session_directory
    " vimを辞める時に自動保存
    let g:session_autosave = 'yes'
    " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開かない
    let g:session_autoload = 'no'
    " 1分間に1回自動保存
    let g:session_autosave_periodic = 1
    let g:session_autosave_silent = 1
  else
    " neovimのディレクトリにsession作成
    let s:local_session_directory = expand("~/.config/nvim/default-sessions")
    " 存在しなければディレクトリ作成する
    if !isdirectory(s:local_session_directory)
      call mkdir(s:local_session_directory)
    endif
    " デフォルトの保存ディレクトリを変更する
    let g:session_directory = s:local_session_directory
    " vimを辞める時に自動保存しない
    let g:session_autosave = 'no'
    " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開かない
    let g:session_autoload = 'no'
  endif
  unlet s:git_dir
endif
unlet s:local_session_directory

" セッション保存と復帰のコマンド
" https://qiita.com/ToruIwashita/items/8c5039655ab73ea9261e
function! s:save_session(...)
  if a:0
    let session_name = a:1
  else
    let session_name = s:GetGitCurrentBranch()
  end

  if strlen(session_name)
    execute 'SaveSession ' . session_name . '.branch'
  else
    echo 'not a git repository'
  endif
endfunction

function! s:load_session(...)
  if a:0
    let session_name = a:1
  else
    let session_name = s:GetGitCurrentBranch()
  end

  if strlen(session_name)
    execute 'OpenSession ' . session_name . '.branch'
  else
    echo 'no target session found'
  endif
endfunction

command! -nargs=? SaveBranchSession call s:save_session(<f-args>)
command! -nargs=? LoadBranchSession call s:load_session(<f-args>)
'''

# linter
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" 常にサイン列を表示
let g:ale_sign_column_always = 1
" ファイル保存時に実行
let g:ale_fix_on_save = 1
let g:ale_set_loclist = 1

" 言語ごとの設定
"" 初期化
if !exists("g:ale_linters")
	let g:ale_linters = {}
endif
if !exists("g:ale_linters_ignore")
	let g:ale_linters_ignore = {}
endif
if !exists("g:ale_fixers")
  let g:ale_fixers = {}
endif

""" Go
let g:ale_linters['go'] = ['gofmt', 'golint', 'govet', 'golangserver']
""" Java
let g:ale_linters['java'] = []
""" Javascript
let g:ale_linters_ignore['javascript'] = ['tsserver', 'flow-language-server']
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_javascript_prettier_options = '--print-width 140 --single-quote --jsx-bracket-same-line'
"""" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
""" Ruby
let g:ale_linters_ignore['ruby'] = ['solargraph', 'rubocop']
""" Rust
let g:ale_linters['rust'] = ['cargo', 'rls']
let g:ale_fixers['rust'] = ['rustfmt']
let g:ale_rust_rls_toolchain = 'stable'
let g:ale_rust_rustfmt_options = '+stable'
'''


#########################################################
# Completion
#########################################################
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <CR>    pumvisible() ? "\<C-y>" : "\<CR>"

imap <c-space> <Plug>(asyncomplete_force_refresh)
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
depends = ['asyncomplete.vim']
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \    'max_buffer_size': 5000000,
    \  },
    \ }))
'''


[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = ['asyncomplete.vim']
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-ultisnips.vim'
depends = ['asyncomplete.vim']
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))
'''

#########################################################
# Text Object
#########################################################
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = 'vim-textobj-user'


#########################################################
# Git
#########################################################
[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
hook_add = '''
autocmd VimEnter,Colorscheme * :hi! link gitmessengerPopupNormal CursorLine
'''
