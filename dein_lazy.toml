[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_if = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
let g:unite_split_rule = 'botright'
nnoremap <silent> [unite] <nop>
nmap <Space> [unite]
nnoremap [unite]u :Unite 
nnoremap [unite]s :Unite source<CR>
nnoremap [unite]f :Unite file<CR>
nnoremap [unite]c :Unite tab buffer<CR>
nnoremap [unite]h :Unite file_mru directory_mru<CR>
nnoremap [unite]b :Unite bookmark<CR>
""  Unite menu settings
nnoremap [unite]m :Unite menu:action -vertical -winwidth=40<CR>
" init
if !exists("g:unite_source_menu_menus")
	let g:unite_source_menu_menus = {}
endif
let g:unite_source_menu_menus.action = {
			\ 'description' : 'My Shortcuts',
			\ }
let g:unite_source_menu_menus.action.candidates = [
			\ [ '~/.vim' , expand('~/.vim') ],
			\ [ 'vimrc' , expand('~/.vim/vimrc') ],
			\ [ 'plugin' , expand('~/.vim/plugin.vimrc') ],
			\ [ 'VimFiler' , 'VimFiler' ],
			\ [ 'VimShell' , 'VimShell' ],
			\ [ 'NERDTree' , 'NERDTreeToggle' ],
			\ [ 'run cpp' , 'QuickRun cpp'],
			\ [ 'run and show PDF' , 'call My_latex_compile_and_show_pdf()' ],
			\ [ 'open in browser' , 'PrevimOpen' ],
			\ ]

function! g:unite_source_menu_menus.action.map(key, value)
	let [word, value] = a:value
	if isdirectory(value)
		return {
					\ 'word'              : '[directory] '.word,
					\ 'kind'              : 'command',
					\ 'action__command' : ':VimFiler '.value
					\ }
	elseif !empty(glob(value))
		return {
					\ 'word'           : '[file] '.word,
					\ 'kind'           : 'file',
					\ 'default_action' : 'tabdrop',
					\ 'action__path'   : value
					\ }
	else
		return {
					\ 'word'            : '[command] '.word,
					\ 'kind'            : 'command',
					\ 'action__command' : value
					\ }
	endif
endfunction

function! My_latex_compile_and_show_pdf()
	exec "QuickRun"
	exec "!evince %:r.pdf &"
	return
endfunction

"for unite grep
if executable('ag')
	let g:unite_source_grep_command = 'ag'
	let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
	let g:unite_source_grep_recursive_opt = ''
endif

'''

[[plugins]]
repo = 'vim-latex/vim-latex'
on_ft = ['tex','latex']
hook_add = '''
"insert here
"set shellslash
"set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
"let g:Imap_UsePlaceHolders = 1
"let g:Imap_DeleteEmptyPlaceHolders = 1
"let g:Imap_StickyPlaceHolders = 0
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats='dvi,pdf'
let g:Tex_FormatDependency_pdf = 'pdf'
"let g:Tex_FormatDependency_pdf = 'dvi,pdf'
"let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'
let g:Tex_FormatDependency_ps = 'dvi,ps'
"let g:Tex_CompileRule_pdf = 'ptex2pdf -u -l -ot "-synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
"let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
let g:Tex_CompileRule_pdf = 'lualatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'luajitlatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'xelatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
"let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'
let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'
"let g:Tex_CompileRule_dvi = 'uplatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
let g:Tex_CompileRule_dvi = 'lualatex -synctex=1 -interaction=nonstopmode -file-line-error-style -output-format=dvi $*'
let g:Tex_BibtexFlavor = 'pbibtex'
let g:Tex_MakeIndexFlavor = 'mendex $*.idx'
"let g:Tex_UseEditorSettingInDVIViewer = 1
let g:Tex_ViewRule_pdf = 'xdg-open'
"let g:Tex_ViewRule_pdf = 'evince'
"let g:Tex_ViewRule_pdf = 'okular --unique'
"let g:Tex_ViewRule_pdf = 'zathura -x "vim --servername synctex -n --remote-silent +\%{line} \%{input}"'
"let g:Tex_ViewRule_pdf = 'qpdfview --unique'
"let g:Tex_ViewRule_pdf = 'texworks'
"let g:Tex_ViewRule_pdf = 'mupdf'
"let g:Tex_ViewRule_pdf = 'firefox -new-window'
"let g:Tex_ViewRule_pdf = 'chromium --new-window'
let g:Imap_FreezeImap=1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['unite.vim', 'neomru.vim']
hook_add = '''
nnoremap <silent> [denite] <nop>
nmap <C-Space> [denite]
nnoremap [denite]d     :Denite 
nnoremap [denite]<C-d> :Denite
nnoremap [denite]f     :Denite file<CR>
nnoremap [denite]<C-f> :Denite file<CR>
nnoremap [denite]b     :Denite buffer<CR>
nnoremap [denite]<C-b> :Denite buffer<CR>
nnoremap [denite]h     :Denite file_mru<CR>
nnoremap [denite]<C-h> :Denite file_mru<CR>
nnoremap [denite]s     :DeniteProjectDir grep -buffer-name=grep -auto-preview <CR>
nnoremap [denite]<C-s> :DeniteProjectDir grep -buffer-name=grep -auto-preview <CR>
nnoremap [denite]n     :Denite -resume -buffer-name=grep -immediately -select=+1<CR>
nnoremap [denite]<C-n> :Denite -resume -buffer-name=grep -immediately -select=+1<CR>
nnoremap [denite]p     :Denite -resume -buffer-name=grep -immediately -select=-1<CR>
nnoremap [denite]<C-p> :Denite -resume -buffer-name=grep -immediately -select=-1<CR>
""  menu settings
nnoremap [denite]m     :Denite menu:action<CR>
nnoremap [denite]<C-m> :Denite menu:action<CR>
'''
hook_post_source = '''
call denite#custom#map(
			\ 'insert',
			\ '<C-j>',
			\ '<denite:move_to_next_line>',
			\ 'noremap'
			\)
call denite#custom#map(
			\ 'insert',
			\ '<C-k>',
			\ '<denite:move_to_previous_line>',
			\ 'noremap'
			\)
call denite#custom#map(
			\ 'insert',
			\ '<C-n>',
			\ '<denite:move_to_next_line>',
			\ 'noremap'
			\)
call denite#custom#map(
			\ 'insert',
			\ '<C-p>',
			\ '<denite:move_to_previous_line>',
			\ 'noremap'
			\)
" init
let s:menus = {}
" let s:menus.action = {
" 			\ 'description' : 'My Shortcuts',
" 			\ }
" let s:menus.action.candidates = [
" 			\ [ '~/.vim' , expand('~/.vim') ],
" 			\ [ 'vimrc' , expand('~/.vim/vimrc') ],
" 			\ [ 'plugin' , expand('~/.vim/plugin.vimrc') ],
" 			\ [ 'VimFiler' , 'VimFiler' ],
" 			\ [ 'VimShell' , 'VimShell' ],
" 			\ [ 'NERDTree' , 'NERDTreeToggle' ],
" 			\ [ 'open in browser' , 'PrevimOpen' ],
" 			\ ]

" function! s:menus.action.map(key, value)
" 	let [word, value] = a:value
" 	if isdirectory(value)
" 		return {
" 					\ 'word'              : '[directory] '.word,
" 					\ 'kind'              : 'command',
" 					\ 'action__command' : ':VimFiler '.value
" 					\ }
" 	elseif !empty(glob(value))
" 		return {
" 					\ 'word'           : '[file] '.word,
" 					\ 'kind'           : 'file',
" 					\ 'default_action' : 'tabdrop',
" 					\ 'action__path'   : value
" 					\ }
" 	else
" 		return {
" 					\ 'word'            : '[command] '.word,
" 					\ 'kind'            : 'command',
" 					\ 'action__command' : value
" 					\ }
" 	endif
" endfunction

" call denite#custom#var('menu', 'menus', s:menus)
call denite#custom#var('menu', 'unite_source_menu_compatibility', v:true)

call denite#custom#var('file_rec', 'command',
			\ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
"for denite grep
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
			\ ['--nogroup', '--nocolor', '--column'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['toml', 'markdown', 'jsp']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml', 'markdown', 'jsp']

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_ft = 'java'
on_if = "filereadable('./build.gradle')"
hook_add = '''
let g:syntastic_java_checkers=['javac']
let g:syntastic_java_javac_config_file_enabled = 1
'''

[[plugins]]
repo = 'Scuilion/gradle-syntastic-plugin'
depends = 'syntastic'
on_ft = 'java'
on_if = "filereadable('./build.gradle')"

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go', 'gotexttmpl', 'gohtmltmpl' ]

[[plugins]]
repo = 'nsf/gocode'
rtp = 'nvim/'
on_ft = 'go'

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
depends = ['gocode', 'deoplete.nvim']
build = 'make'

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
if = 0
depends = 'deoplete.nvim'
on_if = 0
# on_ft = 'java'
hook_post_source = '''
au FileType java setl omnifunc=javacomplete#Complete
'''

[[plugins]]
repo = 'osyo-manga/vim-monster'
# on_if = 0
on_ft = 'ruby'
hook_add = '''
" let g:monster#completion#rcodetools#backend = "async_rct_complete"
let g:deoplete#sources#omni#input_patterns = {
\   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\}
'''

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_if = 0
# on_ft = 'ruby'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_if = 0
# on_ft = 'ruby'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['rust']
build = 'bash ./install.sh'
merged = 0
hook_source = '''
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''
