#########################################################
# Languages
#########################################################
# CSV
[[plugins]]
repo = 'mechatroner/rainbow_csv'
on_ft = ['csv', 'tsv']

# Go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go', 'gotexttmpl', 'gohtmltmpl' ]

# Haskell
[[plugins]]
repo = 'kana/vim-filetype-haskell'
on_ft = 'haskell'

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

# Javascript, JSX
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'javascript.jsx']
hook_add = '''
function! EnableJavascript()
  " Setup used libraries
  let g:used_javascript_libs = 'jquery,underscore,react,flux,jasmine,d3'
  let b:javascript_lib_use_jquery = 1
  let b:javascript_lib_use_underscore = 1
  let b:javascript_lib_use_react = 1
  let b:javascript_lib_use_flux = 1
  let b:javascript_lib_use_jasmine = 1
  let b:javascript_lib_use_d3 = 1
endfunction
autocmd FileType javascript,javascript.jsx call EnableJavascript()
'''

[[plugins]]
repo = 'galooshi/vim-import-js'
on_ft = ['javascript', 'javascript.jsx']

# Markdown
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
merged = 0
hook_add = '''
let g:mkdp_auto_close = 0
'''
hook_source = '''
call mkdp#util#install()
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'

# Ruby on Rails
[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'erb']

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

# TOML
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'


# Others(MULTI)
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['toml', 'markdown', 'jsp']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml', 'markdown', 'jsp']


#########################################################
# Completion
#########################################################
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
let deoplete#enable_at_startup = 1
'''

#########################################################
# Language Server
#########################################################
# [[plugins]]
# repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
# depends = [ 'async.vim' ]
hook_add = '''
" use ALE
let g:lsp_diagnostics_enabled = 0
let g:lsp_auto_enable = 1

""" LspEnable -> On
function! s:lspEnable(with_disable)
  if a:with_disable
    echo 'disable'
    call lsp#disable()
  endif
  echo 'enable'
  call lsp#enable()
endfunction
command! -bang LspEnable call s:lspEnable(<bang>0)


nnoremap <leader>a :LspCodeAction<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
merged = 0
on_source = ['vim-lsp']
hook_add = '''
let g:lsp_settings = {
    \ 'rls': {
    \    'cmd': ['rustup', 'run', 'stable', 'rls']
    \ }}
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
# if = 0
depends = ['vim-lsp']
hook_add = '''
let g:vista_default_executive = 'vim_lsp'
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
on_ft = ['python', 'go', 'rust']
depends = ['deoplete.nvim', 'vim-lsp']
hook_add = '''
set completeopt-=preview
'''



#########################################################
# Motion
#########################################################
[[plugins]]
repo = 'easymotion/vim-easymotion'
trusted = 1
on_map = [
  ['n', '<Plug>(easymotion-', 'f', 'F', 't', 'T'],
  ['v', '<Plug>(easymotion-', 'f', 'F', 't', 'T'],
  ['o', '<Plug>(easymotion-', 'f', 'F', 't', 'T']
  ]
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_keys = 'ASDFGHJKL;QWERTYUIOPZXCVBNM'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_jp = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

function! SetEasyMotionMapping()
	nmap s <Plug>(easymotion-s2)
	xmap s <Plug>(easymotion-s2)
	" surround.vimと被らないように
	omap z <Plug>(easymotion-s2)

	map f <Plug>(easymotion-fl)
	map t <Plug>(easymotion-tl)
	map F <Plug>(easymotion-Fl)
	map T <Plug>(easymotion-Tl)
endfunction
call SetEasyMotionMapping()
'''
hook_post_source = '''
call SetEasyMotionMapping()
'''
